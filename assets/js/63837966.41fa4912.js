"use strict";(self.webpackChunkreact_book=self.webpackChunkreact_book||[]).push([[5900],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>m});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),f=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},c=function(e){var n=f(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=f(r),d=o,m=p["".concat(l,".").concat(d)]||p[d]||u[d]||i;return r?t.createElement(m,s(s({ref:n},c),{},{components:r})):t.createElement(m,s({ref:n},c))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[p]="string"==typeof e?e:o,s[1]=a;for(var f=2;f<i;f++)s[f]=r[f];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8220:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>f});var t=r(7462),o=(r(7294),r(3905));const i={},s=void 0,a={unversionedId:"v16/render/performUnitOfWork",id:"v16/render/performUnitOfWork",title:"performUnitOfWork",description:"performUnitOfWork",source:"@site/docs/v16/render/performUnitOfWork.md",sourceDirName:"v16/render",slug:"/v16/render/performUnitOfWork",permalink:"/react-book/docs/v16/render/performUnitOfWork",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/v16/render/performUnitOfWork.md",tags:[],version:"current",frontMatter:{},sidebar:"v16Sidebar",previous:{title:"performSyncWorkOnRoot",permalink:"/react-book/docs/v16/render/performSyncWorkOnRoot"},next:{title:"processUpdateQueue",permalink:"/react-book/docs/v16/render/processUpdateQueue"}},l={},f=[{value:"<code>performUnitOfWork</code>",id:"performunitofwork",level:2},{value:"<code>completeUnitOfWork</code>",id:"completeunitofwork",level:2},{value:"<code>completeWork</code>",id:"completework",level:2}],c={toc:f},p="wrapper";function u(e){let{components:n,...r}=e;return(0,o.kt)(p,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"performunitofwork"},(0,o.kt)("inlineCode",{parentName:"h2"},"performUnitOfWork")),(0,o.kt)("p",null,"\u8be5\u65b9\u6cd5\u4f4d\u4e8e",(0,o.kt)("inlineCode",{parentName:"p"},"react-reconciler/src/ReactFiberWorkLoop.js"),"\u6587\u4ef6\u4e2d\u3002"),(0,o.kt)("p",null,"\u5176\u6838\u5fc3\u903b\u8f91\u5728\u4e8e\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"beginWork"),"\u5904\u7406\u5f53\u524d\u4f20\u5165\u7684",(0,o.kt)("inlineCode",{parentName:"li"},"fiber"),"\uff0c\u5e76\u5f97\u5230\u4e0b\u4e00\u4e2a\u9700\u8981\u5904\u7406\u7684",(0,o.kt)("inlineCode",{parentName:"li"},"fiber"),"\uff0c\u5373",(0,o.kt)("inlineCode",{parentName:"li"},"next"),"\u5b58\u503c\uff1b"),(0,o.kt)("li",{parentName:"ol"},"\u8be5\u9012\u5f52\u8fc7\u7a0b\u5c5e\u4e8e\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff0c\u5373\u5148\u4e00\u5c42\u4e00\u5c42\u5f80\u4e0b\u904d\u5386\u5b50\u8282\u70b9\uff0c\u6240\u4ee5\u5f53\u904d\u5386\u5230\u6700\u6df1\u4e00\u5c42\u5b50\u8282\u70b9\u65f6\uff0c",(0,o.kt)("inlineCode",{parentName:"li"},"next"),"\u4e3a\u7a7a\uff1b"),(0,o.kt)("li",{parentName:"ol"},"\u5f53",(0,o.kt)("inlineCode",{parentName:"li"},"next"),"\u4e3a\u7a7a\u65f6\uff0c\u8868\u660e\u6df1\u5ea6\u8fbe\u5e95\u90e8\uff0c\u518d\u8c03\u7528",(0,o.kt)("inlineCode",{parentName:"li"},"completeUnitOfWork"),"\u8fd4\u56de\u5176\u5144\u5f1f\u8282\u70b9\uff0c\u4ee5\u6b64\u6765\u5b9e\u73b0\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff1b")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * \u91c7\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u7b56\u7565\u5904\u7406\u8282\u70b9\n * \n * 1. beginWork\u503c\u8fd4\u56de\u5f53\u524d\u8282\u70b9\u7684child\n * 2. \u5f53beginWork\u8fd4\u56de\u7684child\u4e3a\u7a7a\u65f6\uff0c\u518d\u8c03\u7528completeUnitOfWork\u8fd4\u56de\u5176\u5144\u5f1f\u8282\u70b9\n *\n * @param {Fiber} unitOfWork \u9700\u8981\u66f4\u65b0\u7684\u8282\u70b9\n * @return {*}\n */\nfunction performUnitOfWork(unitOfWork: Fiber): Fiber | null {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  // \u8be5fiber\u7684\u5f53\u524d\u5df2\u5237\u65b0\u72b6\u6001\u662f\u4f5c\u4e3a\u5907\u7528\u3002\n  // \u7406\u60f3\u60c5\u51b5\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u6b64\uff0c\u4f46\u662f\u5728\u8fd9\u91cc\u4f9d\u8d56\u5b83\u610f\u5473\u7740\u6211\u4eec\n  // \u5728\u5de5\u4f5c\u8fdb\u884c\u4e2d\u7684\u4e0d\u9700\u8981\u518d\u4e00\u4e2a\u9644\u52a0\u5b57\u6bb5\u3002\n  const current = unitOfWork.alternate;\n\n  startWorkTimer(unitOfWork);\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, renderExpirationTime);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    // \u8c03\u7528beginWork\n    next = beginWork(current, unitOfWork, renderExpirationTime);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    next = completeUnitOfWork(unitOfWork);\n  }\n\n  ReactCurrentOwner.current = null;\n  return next;\n}\n")),(0,o.kt)("h2",{id:"completeunitofwork"},(0,o.kt)("inlineCode",{parentName:"h2"},"completeUnitOfWork")),(0,o.kt)("p",null,"\u8be5\u65b9\u6cd5\u7684\u6838\u5fc3\u5728",(0,o.kt)("inlineCode",{parentName:"p"},"do...while..."),"\u4ee3\u7801\u7684\u6700\u540e\uff0c\u5373\u5148\u8fd4\u56de",(0,o.kt)("inlineCode",{parentName:"p"},"siblingFiber"),"\u5144\u5f1f\u8282\u70b9\uff0c\u5982\u679c\u5144\u5f1f\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u5c06\u7236\u8282\u70b9\u8d4b\u503c\u7ed9",(0,o.kt)("inlineCode",{parentName:"p"},"workInProgress"),"\uff0c\u7136\u540e\u7ee7\u7eed\u67e5\u627e\u7236\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * \u5b8c\u6210\u5f53\u524dunit\u7684\u66f4\u65b0\u5de5\u4f5c\uff0c\u5982\u6807\u8bb0effect\u94fe\u7b49\uff0c\u7136\u540e\u8fdb\u884c\u5144\u5f1f\u8282\u70b9\u7684\u66f4\u65b0\uff0c\u5982\u679c\u6ca1\u6709\u5144\u5f1f\u8282\u70b9\uff0c\u5c31\u8fd4\u56de\u7236\u8282\u70b9\uff0c\u7136\u540e\u7ee7\u7eed\u67e5\u627e\u7236\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\n * \u8fd9\u662f\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u7684\u7b97\u6cd5\n * @param unitOfWork\n * @return {Fiber|null|*}\n */\nfunction completeUnitOfWork(unitOfWork: Fiber): Fiber | null {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  // \u4ece\u4e0b\u81f3\u4e0a\uff0c\u79fb\u52a8\u5230\u8be5\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\uff0c\u5982\u679c\u4e00\u76f4\u5f80\u4e0a\u6ca1\u6709\u5144\u5f1f\u8282\u70b9\uff0c\u5c31\u8fd4\u56de\u7236\u8282\u70b9\n  workInProgress = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    // \u83b7\u53d6\u5f53\u524d\u8282\u70b9\n    const current = workInProgress.alternate;\n\n    // \u83b7\u53d6\u7236\u8282\u70b9\n    const returnFiber = workInProgress.return;\n\n    // Check if the work completed or if something threw.\n    // \u5982\u679c\u8be5\u8282\u70b9\u6ca1\u6709\u5f02\u5e38\u629b\u51fa\u7684\u8bdd\uff0c\u5373\u53ef\u6b63\u5e38\u6267\u884c\n    if ((workInProgress.effectTag & Incomplete) === NoEffect) {\n      setCurrentDebugFiberInDEV(workInProgress);\n      let next;\n\n      // \u5b8c\u6210fiber\u7684\u5de5\u4f5c\uff0c\u5982\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u6807\u8bb0\u66f4\u65b0\u7b49\n      // timer\u90fd\u662f\u5206\u6790\u5668\uff0c\u4e00\u822c\u5728\u5f00\u53d1\u73af\u5883\u624d\u7528\u5f97\u5230\uff0c\u7ebf\u4e0a\u73af\u5883\u662f\u7528\u4e0d\u5230\u7684\n      if (\n        !enableProfilerTimer ||\n        (workInProgress.mode & ProfileMode) === NoMode\n      ) {\n        // \u5b8c\u6210\u8be5\u8282\u70b9\u7684\u66f4\u65b0\n        next = completeWork(current, workInProgress, renderExpirationTime);\n      } else {\n        startProfilerTimer(workInProgress);\n        next = completeWork(current, workInProgress, renderExpirationTime);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);\n      }\n      stopWorkTimer(workInProgress);\n      resetCurrentDebugFiberInDEV();\n\n      // \u66f4\u65b0\u5f53\u524dfiber\u7684childExpirationTime\n      resetChildExpirationTime(workInProgress);\n\n      // \u5982\u679cnext\u5b58\u5728\u5219\u8868\u793a\u4ea7\u751f\u4e86\u65b0\u7684\u66f4\u65b0\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        return next;\n      }\n\n      // \u5982\u679c\u7236\u8282\u70b9\u5b58\u5728\uff0c\u5e76\u4e14\u5176Effect\u94fe\u6ca1\u6709\u88ab\u8d4b\u503c\u7684\u8bdd\n      if (\n        returnFiber !== null &&\n        // Do not append effects to parents if a sibling failed to complete\n        (returnFiber.effectTag & Incomplete) === NoEffect\n      ) {\n        // Append all the effects of the subtree and this fiber onto the effect\n        // list of the parent. The completion order of the children affects the\n        // side-effect order.\n        // \u5982\u679c\u7236\u8282\u70b9\u6ca1\u6709\u6302\u8f7dfirstEffect\u7684\u8bdd\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u7684firstEffect\u8d4b\u503c\u7ed9\u7236\u8282\u70b9\u7684firstEffect\n        if (returnFiber.firstEffect === null) {\n          returnFiber.firstEffect = workInProgress.firstEffect;\n        }\n\n        // \u5982\u679c\u7236\u8282\u70b9\u7684lastEffect\u6709\u503c\u7684\u8bdd\uff0c\u5c06nextEffect\u8d4b\u503c\n        // \u8fd9\u91cc\u76ee\u7684\u662f\u4e32\u8054Effect\u94fe\n        if (workInProgress.lastEffect !== null) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;\n          }\n          returnFiber.lastEffect = workInProgress.lastEffect;\n        }\n\n        // If this fiber had side-effects, we append it AFTER the children's\n        // side-effects. We can perform certain side-effects earlier if needed,\n        // by doing multiple passes over the effect list. We don't want to\n        // schedule our own side-effect on our own list because if end up\n        // reusing children we'll schedule this effect onto itself since we're\n        // at the end.\n        // \u83b7\u53d6\u526f\u4f5c\u7528\u6807\u8bb0\n        const effectTag = workInProgress.effectTag;\n\n        // Skip both NoWork and PerformedWork tags when creating the effect\n        // list. PerformedWork effect is read by React DevTools but shouldn't be\n        // committed.\n        // \u5982\u679c\u8be5\u526f\u4f5c\u7528\u6807\u8bb0\u5927\u4e8ePerformedWork\uff0c\u5176\u5b9ePerformedWork\u7684\u503c\u5c31\u662f1\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d\u5b58\u5728\u526f\u4f5c\u7528\n        if (effectTag > PerformedWork) {\n          if (returnFiber.lastEffect !== null) {\n            // \u5982\u679c\u5f53\u524d\u7236\u8282\u70b9\u7684lastEffect\u4e0d\u4e3a\u7a7a\u7684\u65f6\u5019\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u6302\u8f7d\u5230\u7236\u8282\u70b9\u7684\u526f\u4f5c\u7528\u94fe\u6700\u540e\n            returnFiber.lastEffect.nextEffect = workInProgress;\n          } else {\n            // \u5426\u5219\uff0c\u5c06\u5f53\u524d\u8282\u70b9\u6302\u8f7d\u5728\u7236\u8282\u70b9\u7684\u526f\u4f5c\u7528\u94fe\u7684firstEffect\u4e0a\n            returnFiber.firstEffect = workInProgress;\n          }\n          returnFiber.lastEffect = workInProgress;\n        }\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      // \u5982\u679c\u5f53\u524d\u8282\u70b9\u672a\u80fd\u5b8c\u6210\u66f4\u65b0\uff0c\u6355\u83b7\u5176\u4e2d\u7684\u9519\u8bef\n      const next = unwindWork(workInProgress, renderExpirationTime);\n\n      // Because this fiber did not complete, don't reset its expiration time.\n\n      if (\n        enableProfilerTimer &&\n        (workInProgress.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = workInProgress.actualDuration;\n        let child = workInProgress.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        workInProgress.actualDuration = actualDuration;\n      }\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        // TODO: The name stopFailedWorkTimer is misleading because Suspense\n        // also captures and restarts.\n        // \u5982\u679cnext\u5b58\u5728\uff0c\u5219\u8868\u793a\u4ea7\u751f\u4e86\u65b0\u7684work\n        stopFailedWorkTimer(workInProgress);\n\n        // \u66f4\u65b0\u5176effectTag\uff0c\u6807\u8bb0\u662frestart\u7684\n        next.effectTag &= HostEffectMask;\n\n        // \u8fd4\u56denext\uff0c\u4ee5\u4fbf\u6267\u884c\u65b0\u7684work\n        return next;\n      }\n      stopWorkTimer(workInProgress);\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its effect list.\n        // \u5982\u679c\u7236\u8282\u70b9\u5b58\u5728\uff0c\u5219\u5c06\u5176effectTag\u8bbe\u7f6e\u4e3aIncomplete\uff0c\u5373\u672a\u5b8c\u6210\n        returnFiber.firstEffect = returnFiber.lastEffect = null;\n        returnFiber.effectTag |= Incomplete;\n      }\n    }\n\n    // \u5148\u8fd4\u56de\u5144\u5f1f\u8282\u70b9\uff0c\u5144\u5f1f\u8282\u70b9\u904d\u5386\u5b8c\u624d\u8fd4\u56de\u7236\u8282\u70b9\n    // \u56e0\u4e3a\u7236\u8282\u70b9\u5df2\u7ecf\u4f5c\u4e3a\u7237\u7237\u8282\u70b9\u7684child\u66f4\u65b0\u8fc7\uff0c\u6240\u4ee5\u4e0d\u518d\u66f4\u65b0\u7236\u8282\u70b9\n    // \u800c\u662f\u5c06workInProgress = returnFiber\uff0c\u8fdb\u884c\u4e0b\u6b21\u5faa\u73af\u65f6\uff0c\u8fd4\u56de\u7236\u8282\u70b9\u7684\u5144\u5f1f\u8282\u70b9\n    const siblingFiber = workInProgress.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      return siblingFiber;\n    }\n    // Otherwise, return to the parent\n    workInProgress = returnFiber;\n  } while (workInProgress !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n  return null;\n}\n\n")),(0,o.kt)("h2",{id:"completework"},(0,o.kt)("inlineCode",{parentName:"h2"},"completeWork")),(0,o.kt)("p",null,"\u9488\u5bf9\u4e0d\u540c",(0,o.kt)("inlineCode",{parentName:"p"},"Fiber"),"\u8282\u70b9\u7684",(0,o.kt)("inlineCode",{parentName:"p"},"tag"),"\u8fdb\u884c\u4e0d\u540c\u7684\u5904\u7406\u3002"),(0,o.kt)("p",null,"\u53ef\u4ee5\u770b\u5230\uff0c\u9488\u5bf9",(0,o.kt)("inlineCode",{parentName:"p"},"ClassComponent"),"\u4e5f\u4ec5\u4ec5\u662f\u5904\u7406\u4e86",(0,o.kt)("inlineCode",{parentName:"p"},"context"),"\u3002\u800c\u5bf9\u4e8e",(0,o.kt)("inlineCode",{parentName:"p"},"HostComponent"),"\u8282\u70b9\uff0c\u5219\u9700\u8981\u65b0\u5efa",(0,o.kt)("inlineCode",{parentName:"p"},"dom"),"\u5143\u7d20\u6216\u8005\u66f4\u65b0",(0,o.kt)("inlineCode",{parentName:"p"},"dom"),"\u5143\u7d20\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * \u4e3a\u4e86\u521b\u5efa\u597d\u5bf9\u5e94\u7684dom\u8282\u70b9\u63d2\u5165\u5bf9\u5e94\u7684\u7236\u8282\u70b9dom\u8282\u70b9\uff0c\u4e3a\u5176\u6dfb\u52a0\u526f\u4f5c\u7528\u6807\u8bc6\n * \u8be5\u51fd\u6570\u53ef\u4ee5\u7406\u89e3\u4e3a\u9012\u5f52\u8282\u70b9\u7684\u5f52\u9636\u6bb5\uff0c\u53ea\u6709\u5f53fiber\u8282\u70b9\u6ca1\u6709\u5b50\u8282\u70b9\u65f6\u624d\u4f1a\u8fdb\u5165\u6b64\u51fd\u6570\n *\n * @param {Fiber} current fiber\u66f4\u65b0\u4e4b\u524d\u7684\u72b6\u6001\n * @param {Fiber} workInProgress \u5f53\u524d\u6b63\u5728\u66f4\u65b0\u7684fiber\n * @param {ExpirationTime} renderExpirationTime \u8fc7\u671f\u65f6\u95f4\uff0c\u8fd9\u91cc\u662f\u8d4b\u503c\u7ed9\u4e86renderExpirationTime\n * @return {Fiber|null}\n */\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderExpirationTime: ExpirationTime,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      return null;\n    }\n    case HostRoot: {\n      // code...  \n    }\n    case HostComponent: {\n      // \u9996\u5148\u5904\u7406context\n      popHostContext(workInProgress);\n\n      // \u83b7\u53d6\u6839\u5bb9\u5668\uff0c<div id=\"root\"></div>\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n\n      // \u8fd9\u91cc\u662fcurrent\u5b58\u5728\uff0c\u5373\u4e0d\u662f\u7b2c\u4e00\u6b21\u6e32\u67d3\uff0c\u6240\u4ee5\u9700\u8981update\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (enableDeprecatedFlareAPI) {\n          const prevListeners = current.memoizedProps.DEPRECATED_flareListeners;\n          const nextListeners = newProps.DEPRECATED_flareListeners;\n          if (prevListeners !== nextListeners) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n            'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        let wasHydrated = popHydrationState(workInProgress);\n\n        //  wasHydrated\u662f\u670d\u52a1\u7aef\u6e32\u67d3\u624d\u4f1a\u7528\u5230\u7684\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          // code ...\n        } else {\n          // \u521b\u5efadom\u5b9e\u4f8b\n          let instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          // \u5c06\u521b\u5efa\u597d\u7684dom\u5b9e\u4f8b\u63d2\u5165\u5230dom\u6811\u4e2d\n          appendAllChildren(instance, workInProgress, false, false);\n\n          // This needs to be set before we mount Flare event listeners\n          workInProgress.stateNode = instance;\n\n          if (enableDeprecatedFlareAPI) {\n            const listeners = newProps.DEPRECATED_flareListeners;\n            if (listeners != null) {\n              updateDeprecatedEventListeners(\n                listeners,\n                workInProgress,\n                rootContainerInstance,\n              );\n            }\n          }\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            // \u521d\u59cb\u5316dom\u7684\u4e00\u4e9b\u5c5e\u6027\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      return null;\n    }\n  }\n}\n")))}u.isMDXComponent=!0}}]);