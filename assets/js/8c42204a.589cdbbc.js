"use strict";(self.webpackChunkreact_book=self.webpackChunkreact_book||[]).push([[1762],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>k});var o=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function p(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var i=o.createContext({}),c=function(e){var n=o.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):p(p({},n),e)),r},d=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},u="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,s=e.originalType,i=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=c(r),m=t,k=u["".concat(i,".").concat(m)]||u[m]||l[m]||s;return r?o.createElement(k,p(p({ref:n},d),{},{components:r})):o.createElement(k,p({ref:n},d))}));function k(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var s=r.length,p=new Array(s);p[0]=m;var a={};for(var i in n)hasOwnProperty.call(n,i)&&(a[i]=n[i]);a.originalType=e,a[u]="string"==typeof e?e:t,p[1]=a;for(var c=2;c<s;c++)p[c]=r[c];return o.createElement.apply(null,p)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},6982:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>p,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=r(7462),t=(r(7294),r(3905));const s={},p=void 0,a={unversionedId:"v16/render/beginWork",id:"v16/render/beginWork",title:"beginWork",description:"beginWork",source:"@site/docs/v16/render/beginWork.md",sourceDirName:"v16/render",slug:"/v16/render/beginWork",permalink:"/react-book/docs/v16/render/beginWork",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/v16/render/beginWork.md",tags:[],version:"current",frontMatter:{},sidebar:"v16Sidebar",previous:{title:"render",permalink:"/react-book/docs/v16/render/"},next:{title:"ensureRootIsScheduled",permalink:"/react-book/docs/v16/render/ensureRootIsScheduled"}},i={},c=[{value:"<code>beginWork</code>",id:"beginwork",level:2}],d={toc:c},u="wrapper";function l(e){let{components:n,...r}=e;return(0,t.kt)(u,(0,o.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"beginwork"},(0,t.kt)("inlineCode",{parentName:"h2"},"beginWork")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"React"),"\u7684\u66f4\u65b0\u4e3b\u8981\u662f\u8c03\u7528\u4e00\u4e2a",(0,t.kt)("inlineCode",{parentName:"p"},"workLoop"),"\u7684\u51fd\u6570\u6765\u5b9e\u73b0\u5faa\u73af\u53bb\u6784\u5efa",(0,t.kt)("inlineCode",{parentName:"p"},"workInProgress"),"\u6811\uff0c\u6784\u5efa\u8fc7\u7a0b\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"\u5411\u4e0b\u904d\u5386\uff0c\u9760\u8c03\u7528",(0,t.kt)("inlineCode",{parentName:"li"},"beginWork"),"\u5b9e\u73b0\uff1b"),(0,t.kt)("li",{parentName:"ol"},"\u5411\u4e0a\u56de\u6eaf\uff0c\u9760\u8c03\u7528",(0,t.kt)("inlineCode",{parentName:"li"},"completeWork"),"\u5b9e\u73b0\u3002")),(0,t.kt)("p",null,"\u8be5\u51fd\u6570\u7684\u903b\u8f91\u662f\u5148\u5224\u65ad\u5f53\u524d\u8282\u70b9\u7684\u4f18\u5148\u7ea7\uff0c\u770b\u662f\u5426\u9700\u8981\u5904\u7406\uff0c\u5982\u679c\u4e0d\u9700\u8981\u5904\u7406\uff0c\u5219\u8c03\u7528",(0,t.kt)("inlineCode",{parentName:"p"},"bailoutOnAlreadyFinishedWork"),"\u51fd\u6570\u590d\u7528\u8282\u70b9\uff0c\u5426\u5219\u624d\u6839\u636e\u4e0d\u540c\u7684",(0,t.kt)("inlineCode",{parentName:"p"},"tag"),"\u8c03\u7528\u4e0d\u540c\u7684\u5904\u7406\u51fd\u6570\u53bb\u5904\u7406\u3002"),(0,t.kt)("p",null,"\u8be5\u51fd\u6570\u5904\u7406\u5b8c\u5f53\u524d",(0,t.kt)("inlineCode",{parentName:"p"},"fiber"),"\u540e\u4f1a\u8fd4\u56de\u5176",(0,t.kt)("inlineCode",{parentName:"p"},"child"),"\u8282\u70b9\uff0c\u4ee5\u6b64\u6765\u5b8c\u6210\u5bf9\u5b50\u8282\u70b9\u7684\u4e00\u7ea7\u4e00\u7ea7\u904d\u5386\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * \u5f00\u59cb\u5411\u4e0b\u904d\u5386\u8282\u70b9\uff0c\u8c03\u7528\u4e0d\u540c\u7684\u5904\u7406\u51fd\u6570\u8fdb\u884c\u5904\u7406\n * @param {Fiber} current \u66f4\u65b0\u524d\u7684fiber\n * @param {Fiber} workInProgress \u66f4\u65b0\u8fc7\u7a0b\u4e2d\u7684fiber\n * @param {ExpirationTime} renderExpirationTime \u8fc7\u671f\u65f6\u95f4\uff0c\u5f53\u524d\u662f\u66f4\u65b0\u65f6\u95f4\n * @return {Fiber|null|*|Fiber}\n */\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderExpirationTime: ExpirationTime,\n): Fiber | null {\n  const updateExpirationTime = workInProgress.expirationTime;\n\n  // \u8fd9\u91cc\u662f\u5bf9\u8282\u70b9\u7684\u9884\u5904\u7406\uff0c\u4e5f\u53ea\u6709\u5728current\u5b58\u5728\uff0c\u4e5f\u5c31\u662f\u975e\u7b2c\u4e00\u6b21\u6e32\u67d3\u65f6\u624d\u4f1a\u8fdb\u5165\u8fd9\u91cc\u3002\n  if (current !== null) {\n    // \u83b7\u53d6\u65b0\u8001props\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    // \u8fd9\u4e00\u7cfb\u5217if\u5224\u65ad\u4e3b\u8981\u7528\u6765\u8bbe\u7f6edidReceiveUpdate\u7684\u503c\uff0c\u540c\u65f6\u5904\u7406context\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      // hot load\u9020\u6210\u7684\u66f4\u65b0\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      // \u8fd9\u91cc\u5148\u5bf9\u6bd4\u65b0\u8001props\uff0c\u4ee5\u53cacontext\u662f\u5426\u6709\u66f4\u65b0\uff0c\u5982\u679c\u6709\u7684\u8bdd\u8fdb\u884c\u5168\u5c40\u6807\u8bb0\n      didReceiveUpdate = true;\n    } else if (updateExpirationTime < renderExpirationTime) {\n      // \u770b\u4f18\u5148\u7ea7\u591f\u4e0d\u591f\uff0c\u4e0d\u591f\u7684\u8bdd\u5c31\u8c03\u7528bailoutOnAlreadyFinishedWork\n      didReceiveUpdate = false;\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          resetHydrationState();\n          break;\n        case HostComponent:\n          // code...\n          break;\n        case ClassComponent: {\n          // code... \n          break;\n        }\n        case HostPortal:\n          // code...\n          break;\n        case ContextProvider: {\n          // code...\n          break;\n        }\n        case Profiler:\n          // code...\n          break;\n        case SuspenseComponent: {\n          // code...\n          break;\n        }\n        case SuspenseListComponent: {\n          // code...\n        }\n      }\n\n      // \u62e6\u622a\u65e0\u9700\u66f4\u65b0\u7684\u8282\u70b9\n      return bailoutOnAlreadyFinishedWork(\n        current,\n        workInProgress,\n        renderExpirationTime,\n      );\n    } else {\n      // An update was scheduled on this fiber, but there are no new props\n      // nor legacy context. Set this to false. If an update queue or context\n      // consumer produces a changed value, it will set this to true. Otherwise,\n      // the component will assume the children have not changed and bail out.\n      didReceiveUpdate = false;\n    }\n  } else {\n    didReceiveUpdate = false;\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  // \u8fd9\u91cc\u624d\u662f\u771f\u6b63\u8981\u53bb\u5904\u7406\u8282\u70b9\uff0c\u4f1a\u6839\u636etag\u533a\u5206\u4e0d\u540c\u7684\u5904\u7406\u51fd\u6570\u53d6\u5904\u7406\n  workInProgress.expirationTime = NoWork;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderExpirationTime,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        updateExpirationTime,\n        renderExpirationTime,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderExpirationTime,\n      );\n    }\n    case ClassComponent: {\n      // \u83b7\u53d6\u7ec4\u4ef6class\uff0c\u5373\u5b9a\u4e49\u65f6\u5199\u7684class xxx extends Component\u7c7b\n      const Component = workInProgress.type;\n\n      // \u672a\u5904\u7406\u7684props\uff0c\u4e5f\u5c31\u662f\u5373\u5c06\u8981\u6e32\u67d3\u7684props\n      const unresolvedProps = workInProgress.pendingProps;\n\n      // \u5904\u7406props\uff0c\u5f97\u5230\u6700\u7ec8\u7684props\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n\n      // \u8c03\u7528updateClassComponent\u51fd\u6570\u5904\u7406classComponent\u7ec4\u4ef6\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderExpirationTime,\n      );\n    }\n    case HostRoot:\n      // Root\u8282\u70b9\u7684\u66f4\u65b0\n      return updateHostRoot(current, workInProgress, renderExpirationTime);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderExpirationTime);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(\n        current,\n        workInProgress,\n        renderExpirationTime,\n      );\n    case HostPortal:\n      return updatePortalComponent(\n        current,\n        workInProgress,\n        renderExpirationTime,\n      );\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderExpirationTime,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderExpirationTime);\n    case Mode:\n      return updateMode(current, workInProgress, renderExpirationTime);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderExpirationTime);\n    case ContextProvider:\n      return updateContextProvider(\n        current,\n        workInProgress,\n        renderExpirationTime,\n      );\n    case ContextConsumer:\n      return updateContextConsumer(\n        current,\n        workInProgress,\n        renderExpirationTime,\n      );\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentName(type),\n              getCurrentFiberStackInDev,\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        updateExpirationTime,\n        renderExpirationTime,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        updateExpirationTime,\n        renderExpirationTime,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderExpirationTime,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(\n        current,\n        workInProgress,\n        renderExpirationTime,\n      );\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        return updateFundamentalComponent(\n          current,\n          workInProgress,\n          renderExpirationTime,\n        );\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(\n          current,\n          workInProgress,\n          renderExpirationTime,\n        );\n      }\n      break;\n    }\n    case Block: {\n      if (enableBlocksAPI) {\n        const block = workInProgress.type;\n        const props = workInProgress.pendingProps;\n        return updateBlock(\n          current,\n          workInProgress,\n          block,\n          props,\n          renderExpirationTime,\n        );\n      }\n      break;\n    }\n  }\n}\n\n")))}l.isMDXComponent=!0}}]);