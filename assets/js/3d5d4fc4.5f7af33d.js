"use strict";(self.webpackChunkreact_book=self.webpackChunkreact_book||[]).push([[5485],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),l=s(t),h=i,m=l["".concat(c,".").concat(h)]||l[h]||u[h]||o;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=h;var d={};for(var c in n)hasOwnProperty.call(n,c)&&(d[c]=n[c]);d.originalType=e,d[l]="string"==typeof e?e:i,a[1]=d;for(var s=2;s<o;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6929:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const o={},a=void 0,d={unversionedId:"v16/render/scheduleWork",id:"v16/render/scheduleWork",title:"scheduleWork",description:"\u8fdb\u5165scheduleWork\u5c31\u610f\u5473\u7740\u8fdb\u5165\u4e86\u8c03\u5ea6\u9636\u6bb5\u3002",source:"@site/docs/v16/render/scheduleWork.md",sourceDirName:"v16/render",slug:"/v16/render/scheduleWork",permalink:"/react-book/docs/v16/render/scheduleWork",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/v16/render/scheduleWork.md",tags:[],version:"current",frontMatter:{},sidebar:"v16Sidebar",previous:{title:"reconcileChildren",permalink:"/react-book/docs/v16/render/reconcileChildren"},next:{title:"updateClassComponent",permalink:"/react-book/docs/v16/render/updateClassComponent"}},c={},s=[{value:"<code>schedulwWork</code>",id:"schedulwwork",level:2},{value:"<code>checkForNestedUpdates</code>",id:"checkfornestedupdates",level:2},{value:"<code>markUpdateTimeFromFiberToRoot</code>",id:"markupdatetimefromfibertoroot",level:2},{value:"<code>checkForInterruption</code>",id:"checkforinterruption",level:2},{value:"<code>schedulePendingInteractions</code>",id:"schedulependinginteractions",level:2}],p={toc:s},l="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(l,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"\u8fdb\u5165",(0,i.kt)("inlineCode",{parentName:"p"},"scheduleWork"),"\u5c31\u610f\u5473\u7740\u8fdb\u5165\u4e86\u8c03\u5ea6\u9636\u6bb5\u3002"),(0,i.kt)("h2",{id:"schedulwwork"},(0,i.kt)("inlineCode",{parentName:"h2"},"schedulwWork")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"scheduleWork"),"\u65b9\u6cd5\u7684\u5177\u4f53\u5b9e\u73b0\u5728",(0,i.kt)("inlineCode",{parentName:"p"},"react-reconciler/src/ReactFiberWorkLoop.js"),"\u6587\u4ef6\u4e2d\u3002"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"scheduleUpdateOnFiber"),"\u5373\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"scheduleWork"),"\u65b9\u6cd5\u3002\u5176\u4e3b\u903b\u8f91\u5728\u51fd\u6570\u5185\u7684\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"if...else..."),"\u6761\u4ef6\u5224\u65ad\u4e2d\uff1a"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\u5982\u679c",(0,i.kt)("inlineCode",{parentName:"li"},"expirationTime ==== Sync"),"\uff0c\u5373\u4ee3\u8868\u5f53\u524d",(0,i.kt)("inlineCode",{parentName:"li"},"Root"),"\u6811\u662f\u540c\u6b65\u66f4\u65b0\uff0c\u4e14\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u4e0d\u662f\u6279\u91cf\u66f4\u65b0\uff0c\u4e5f\u4e0d\u5904\u4e8e",(0,i.kt)("inlineCode",{parentName:"li"},"render\u3001commit"),"\u9636\u6bb5\uff0c\u5219\u9a6c\u4e0a\u8c03\u7528",(0,i.kt)("inlineCode",{parentName:"li"},"performSyncWorkOnRoot"),"\u65b9\u6cd5\u8fdb\u884c\u540c\u6b65\u66f4\u65b0\uff1b"),(0,i.kt)("li",{parentName:"ul"},"\u53cd\u4e4b\uff0c\u5f53\u524d\u4efb\u52a1\u53ef\u80fd\u662f\u5f02\u6b65\u4efb\u52a1\uff0c\u53ef\u80fd\u4e3b\u7ebf\u7a0b\u6b63\u5904\u4e8e\u6279\u91cf\u66f4\u65b0\u4e2d\uff0c\u53ef\u80fd\u5f53\u524d\u4e3b\u7ebf\u7a0b\u5904\u4e8e",(0,i.kt)("inlineCode",{parentName:"li"},"render\u3001commit"),"\u9636\u6bb5\uff0c\u5219\u8c03\u7528",(0,i.kt)("inlineCode",{parentName:"li"},"ensureRootIsScheduled"),"\u65b9\u6cd5\u5c06\u672c\u5730\u66f4\u65b0\u653e\u5165\u66f4\u65b0\u961f\u5217\u4e2d\uff0c\u5f85\u7ebf\u7a0b\u6709\u7a7a\u65f6\u518d\u89e6\u53d1\u66f4\u65b0\uff0c\u8fd9\u5c31\u662f\u6d89\u53ca\u5230",(0,i.kt)("inlineCode",{parentName:"li"},"react"),"\u7684\u8c03\u5ea6\u66f4\u65b0\u4e86\uff1b")),(0,i.kt)("p",null,"\u6d41\u7a0b\u56fe\u5982\u4e0b\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/aaaaaAndy/picture/main/images/20220217200847.png",alt:"scheduleWork"})),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"scheduleWork"),"\u6e90\u7801\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"export const scheduleWork = scheduleUpdateOnFiber;\n\n/**\n * \u5f00\u59cb\u8c03\u5ea6\n * @param {Fiber} fiber \u5bf9\u5e94\u7684fiber\n * @param {ExpirationTime} expirationTime \u8fc7\u671f\u65f6\u95f4\n */\nexport function scheduleUpdateOnFiber(\n  fiber: Fiber,\n  expirationTime: ExpirationTime,\n) {\n  //\u68c0\u67e5\u662f\u5426\u8fbe\u5230\u4e86\u6700\u5927\u66f4\u65b0\u657050\u6b21\n  checkForNestedUpdates();\n\n  // \u8b66\u544a\u63d0\u793a\u662f\u5426\u5728render\u9636\u6bb5\u8c03\u7528\u4e86\u4e00\u4e2a\u66f4\u65b0\uff0c\u5982setState\n  warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n  // \u6807\u8bb0\u4ecefiber\u5230root\u7684\u66f4\u65b0\u65f6\u95f4\n  const root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);\n  if (root === null) {\n    warnAboutUpdateOnUnmountedFiberInDEV(fiber);\n    return;\n  }\n\n  // \u5224\u65ad\u662f\u5426\u6709\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u6253\u65ad\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1\n  checkForInterruption(fiber, expirationTime);\n\n  // \u7528\u6765\u8bb0\u5f55\u8c03\u5ea6\u5668\u7684\u6267\u884c\u72b6\u6001\n  recordScheduleUpdate();\n\n  // TODO: computeExpirationForFiber also reads the priority. Pass the\n  // priority as an argument to that function and this one.\n  const priorityLevel = getCurrentPriorityLevel();\n\n  if (expirationTime === Sync) {\n    if (\n      // Check if we're inside unbatchedUpdates\n      // \u7b2c\u4e00\u6b21\u6267\u884crender\u7684\u65f6\u5019\u8c03\u7528unbatchedUpdate()\u65f6\u8bbe\u7f6e\u4e86executionContext |= LegacyUnbatchedContext\n      // \u8c03\u7528ReactDOM.render\u65f6\uff0c\u5f53\u524d\u6761\u4ef6\u4e3a\u771f\n      (executionContext & LegacyUnbatchedContext) !== NoContext &&\n      // Check if we're not already rendering\n      // \u5224\u65ad\u662f\u5426\u5904\u4e8erender\u6216commit\u9636\u6bb5\n      // \u8c03\u7528ReactDOM.render\u65f6\uff0c\u5f53\u524d\u6761\u4ef6\u4e3a\u771f\n      (executionContext & (RenderContext | CommitContext)) === NoContext\n    ) {\n      // Register pending interactions on the root to avoid losing traced interaction data.\n      // \u7528\u6765\u5904\u7406\u4ea4\u4e92\u5f15\u8d77\u7684\u66f4\u65b0\uff0c\u8ddf\u8e2a\u8fd9\u4e9b\u66f4\u65b0\uff0c\u5e76\u8ba1\u6570\u3001\u68c0\u6d4b\u5b83\u4eec\u662f\u5426\u4f1a\u62a5\u9519\n      schedulePendingInteractions(root, expirationTime);\n\n      // This is a legacy edge case. The initial mount of a ReactDOM.render-ed\n      // root inside of batchedUpdates should be synchronous, but layout updates\n      // should be deferred until the end of the batch.\n      // \u5982\u679c\u672c\u5730\u66f4\u65b0\u662f\u540c\u6b65\u7684\uff0c\u800c\u4e14\u5f53\u524d\u8fd8\u672a\u6e32\u67d3\uff0c\u610f\u5473\u7740\u4e3b\u7ebf\u7a0b\u7a7a\u95f2\uff0c\u5e76\u6ca1\u6709react\u7684\u66f4\u65b0\u4efb\u52a1\u5728\u6267\u884c\uff0c\n      // \u90a3\u4e48\u5c31\u8c03\u7528performSyncWorkOnRoot\u5f00\u59cb\u5de5\u4f5c\n      performSyncWorkOnRoot(root);\n    } else {\n      // \u5982\u679c\u662f\u672c\u6b21\u66f4\u65b0\u662f\u540c\u6b65\u7684\uff0c\u4e0d\u8fc7\u5f53\u524d\u6709React\u66f4\u65b0\u4efb\u52a1\u6b63\u5728\u8fdb\u884c\uff0c\n      // \u800c\u4e14\u56e0\u4e3a\u65e0\u6cd5\u6253\u65ad\uff0c\u6240\u4ee5\u8c03\u7528ensureRootIsScheduled\n      // \u76ee\u7684\u662f\u53bb\u590d\u7528\u5df2\u7ecf\u5728\u66f4\u65b0\u7684\u4efb\u52a1\uff0c\u8ba9\u8fd9\u4e2a\u5df2\u6709\u7684\u4efb\u52a1\n      // \u628a\u8fd9\u6b21\u66f4\u65b0\u987a\u4fbf\u505a\u4e86\n      ensureRootIsScheduled(root);\n\n      schedulePendingInteractions(root, expirationTime);\n      if (executionContext === NoContext) {\n        // Flush the synchronous work now, unless we're already working or inside\n        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n        // scheduleCallbackForFiber to preserve the ability to schedule a callback\n        // without immediately flushing it. We only do this for user-initiated\n        // updates, to preserve historical behavior of legacy mode.\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    // \u5982\u679c\u662f\u66f4\u65b0\u662f\u5f02\u6b65\u7684\uff0c\u8c03\u7528ensureRootIsScheduled\u53bb\u8fdb\u5165\u5f02\u6b65\u8c03\u5ea6\n    ensureRootIsScheduled(root);\n    schedulePendingInteractions(root, expirationTime);\n  }\n\n  if (\n    (executionContext & DiscreteEventContext) !== NoContext &&\n    // Only updates at user-blocking priority or greater are considered\n    // discrete, even inside a discrete event.\n    (priorityLevel === UserBlockingPriority ||\n      priorityLevel === ImmediatePriority)\n  ) {\n    // This is the result of a discrete event. Track the lowest priority\n    // discrete update per root so we can flush them early, if needed.\n    if (rootsWithPendingDiscreteUpdates === null) {\n      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);\n    } else {\n      const lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);\n      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {\n        rootsWithPendingDiscreteUpdates.set(root, expirationTime);\n      }\n    }\n  }\n}\n")),(0,i.kt)("h2",{id:"checkfornestedupdates"},(0,i.kt)("inlineCode",{parentName:"h2"},"checkForNestedUpdates")),(0,i.kt)("p",null,"\u6e90\u7801\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// \u6700\u5927\u66f4\u65b0\u6570\nconst NESTED_UPDATE_LIMIT = 50;\n\n/**\n * \u68c0\u67e5\u662f\u5426\u5904\u4e8e\u65e0\u9650\u5faa\u73af\u66f4\u65b0\u4e2d\n */\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    invariant(\n      false,\n      'Maximum update depth exceeded. This can happen when a component ' +\n      'repeatedly calls setState inside componentWillUpdate or ' +\n      'componentDidUpdate. React limits the number of nested updates to ' +\n      'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n        'calls setState inside useEffect, but useEffect either doesn\\'t ' +\n        'have a dependency array, or one of the dependencies changes on ' +\n        'every render.',\n      );\n    }\n  }\n}\n")),(0,i.kt)("p",null,"\u5176\u4e2d",(0,i.kt)("inlineCode",{parentName:"p"},"nestedUpdateCount"),"\u53ea\u4f1a\u5728\u4e00\u6b21\u66f4\u65b0\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"commit"),"\u9636\u6bb5\u624d\u4f1a\u52a01\uff0c\u56e0\u4e3a\u4e00\u6b21",(0,i.kt)("inlineCode",{parentName:"p"},"commit"),"\u4ee3\u8868\u4e00\u6b21\u66f4\u65b0\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u6765\u8bb0\u5f55\u66f4\u65b0\u6b21\u6570\uff0c\u8fd9\u91cc\u7684\u903b\u8f91\u5c31\u662f\u5f53\u5faa\u73af\u66f4\u65b0\u6b21\u6570\u8d85\u8fc750\u6b21\u662f\u5c31\u8ba4\u4e3a\u8fdb\u5165\u4e86\u65e0\u9650\u5faa\u73af\u4e2d\uff0c\u5f53\u5373\u62a5\u9519\u63d0\u9192\u3002\u76f8\u4fe1\u5927\u5bb6\u5728\u65e5\u5e38\u5f00\u53d1\u4e2d\u4e5f\u9047\u89c1\u8fc7",(0,i.kt)("inlineCode",{parentName:"p"},"invariant"),"\u51fd\u6570\u4e2d\u7684\u62a5\u9519\uff0c\u90a3\u5c31\u662f\u8fd9\u91cc\u6253\u5370\u7684\u3002"),(0,i.kt)("h2",{id:"markupdatetimefromfibertoroot"},(0,i.kt)("inlineCode",{parentName:"h2"},"markUpdateTimeFromFiberToRoot")),(0,i.kt)("p",null,"\u6b64\u65b9\u6cd5\u662f\u5c06",(0,i.kt)("inlineCode",{parentName:"p"},"fiber"),"\u4e0a\u7684\u8fc7\u671f\u65f6\u95f4",(0,i.kt)("inlineCode",{parentName:"p"},"expirationTime"),"\u53cd\u5e94\u5230\u7236\u7ea7\u3001\u7956\u7236\u7ea7",(0,i.kt)("inlineCode",{parentName:"p"},"fiber"),"\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"childExpirationTime"),"\u4e0a\uff0c\u4ee5\u4fbf\u76f4\u63a5\u627e\u5230\u7236\u7ea7",(0,i.kt)("inlineCode",{parentName:"p"},"fiber"),"\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"childExpirationTime"),"\u5c31\u80fd\u77e5\u9053\u5f53\u524d",(0,i.kt)("inlineCode",{parentName:"p"},"fiber"),"\u7684\u5b50\u6811\u662f\u5426\u9700\u8981\u66f4\u65b0\u3002"),(0,i.kt)("p",null,"\u6e90\u7801\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\n// 1. \u66f4\u65b0fiber\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u5982\u679c fiber \u4e0a\u5b58\u5728 alternate\uff0c\u540c\u65f6\u66f4\u65b0 alternate \u7684\u8fc7\u671f\u65f6\u95f4\uff1b\n// 2. \u6839\u636e fiber.return \u5411\u4e0a\u904d\u5386\u7236\u8282\u70b9\uff0c\u76f4\u5230\u627e\u5230 rootFiber\uff08node === null && fiber.tag === HostRoot\uff09\uff1b\n// 3. \u5728\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u66f4\u65b0\u7236\u8282\u70b9\u7684 childExpirationTime\uff0c\u5982\u679c\u7236\u8282\u70b9\u4e0a\u5b58\u5728 alternate \u540c\u65f6\u66f4\u65b0 alternate.childExpirationTime\uff1b\n// 4. \u627e\u5230 rootFiber \u540e\uff0c\u6839\u636e rootFiber.stateNode=fiberRoot \u7684\u5173\u7cfb\uff0c\u627e\u5230 fiberRoot\uff1b\n// 5. markUnprocessedUpdateTime\u3001markRootSuspendedAtTime \u5927\u81f4\u4e0a\u770b\u662f\u7528\u6765\u505a\u4e2d\u65ad\u6062\u590d\u7684\u5904\u7406\uff1b\n// 6. \u8c03\u7528 markRootUpdatedAtTime \u6807\u8bb0 fiberRoot \u4e0a\u6709\u5f85\u5904\u7406\u7684\u66f4\u65b0\u3002\nfunction markUpdateTimeFromFiberToRoot(fiber, expirationTime) {\n  // Update the source fiber's expiration time\n  // \u66f4\u65b0\u6e90fiber\u7684expirationTime\n  if (fiber.expirationTime < expirationTime) {\n    fiber.expirationTime = expirationTime;\n  }\n\n  // \u66f4\u65b0fiber.alternate\u7684expirationTime\n  let alternate = fiber.alternate;\n  if (alternate !== null && alternate.expirationTime < expirationTime) {\n    alternate.expirationTime = expirationTime;\n  }\n\n  // Walk the parent path to the root and update the child expiration time.\n  // \u66f4\u65b0\u4ece\u5f53\u524dfiber\u5230root\u7684\u6240\u6709\u7236\u7ea7\u5143\u7d20\u7684expirationTime\n  let node = fiber.return;\n  let root = null;\n  // RootFiber\u5bf9\u5e94\u7684tag\u4e3aHostRoot = 3;\n  if (node === null && fiber.tag === HostRoot) {\n    // fiber.stateNode\u4e3a\u83b7\u53d6RootFiber\u5bf9\u5e94\u7684FiberRoot\n    root = fiber.stateNode;\n  } else {\n    while (node !== null) {\n      alternate = node.alternate;\n      if (node.childExpirationTime < expirationTime) {\n        node.childExpirationTime = expirationTime;\n        if (\n          alternate !== null &&\n          alternate.childExpirationTime < expirationTime\n        ) {\n          alternate.childExpirationTime = expirationTime;\n        }\n      } else if (\n        alternate !== null &&\n        alternate.childExpirationTime < expirationTime\n      ) {\n        alternate.childExpirationTime = expirationTime;\n      }\n      if (node.return === null && node.tag === HostRoot) {\n        root = node.stateNode;\n        break;\n      }\n      node = node.return;\n    }\n  }\n\n  if (root !== null) {\n    if (workInProgressRoot === root) {\n      // \u5f53\u5728render\u9636\u6bb5\u65f6\u6536\u5230\u4e00\u4e2arender\uff0c\u7b2c\u4e00\u6b21render\u4e0d\u4f1a\u8fdb\u5165\u8fd9\u91cc\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that's unprocessed work on this root.\n      // \u6807\u8bb0\u672a\u5904\u7406\u7684\u66f4\u65b0\u65f6\u95f4\n      // \u5f53\u6536\u5230\u5bf9\u6e32\u67d3\u7684\u4e2d\u95f4\u6811\u7684\u66f4\u65b0\uff0c\u6807\u8bb0\u8fd9\u662f\u8be5\u6839\u76ee\u5f55\u4e0a\u7684\u672a\u5904\u7406\u5de5\u4f5c\u3002\n      markUnprocessedUpdateTime(expirationTime);\n\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: This happens to work when receiving an update during the render\n        // phase, because of the trick inside computeExpirationForFiber to\n        // subtract 1 from `renderExpirationTime` to move it into a\n        // separate bucket. But we should probably model it with an exception,\n        // using the same mechanism we use to force hydration of a subtree.\n        // TODO: This does not account for low pri updates that were already\n        // scheduled before the root started rendering. Need to track the next\n        // pending expiration time (perhaps by backtracking the return path) and\n        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.\n        // \u5f53\u6839\u76ee\u5f55\u5df2\u7ecf\u88ab\u8bbe\u7f6e\u4e3a\u5ef6\u8fdf\u66f4\u65b0\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u6e32\u67d3\u4e00\u5b9a\u4e0d\u4f1a\u7ed3\u675f\u3002\n        // \u7531\u4e8e\u6211\u4eec\u6709\u65b0\u7684\u66f4\u65b0\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u6807\u8bb0\u65b0\u7684 update \u4e4b\u524d\uff0c\u5c06\u5176\u6807\u8bb0\u4e3a\n        // \u73b0\u5728\u6682\u505c\u3002\u8fd9\u6709\u4e2d\u65ad\u5f53\u524d\u6e32\u67d3\u5e76\u5207\u6362\u5230\u66f4\u65b0\u7684\u6548\u679c\u3002\n        markRootSuspendedAtTime(root, renderExpirationTime);\n      }\n    }\n    // Mark that the root has a pending update.\n    // \u6807\u8bb0fiberRoot\u4e0a\u6709\u5f85\u5904\u7406\u7684\u66f4\u65b0\n    markRootUpdatedAtTime(root, expirationTime);\n  }\n\n  return root;\n}\n")),(0,i.kt)("h2",{id:"checkforinterruption"},(0,i.kt)("inlineCode",{parentName:"h2"},"checkForInterruption")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"// \u5224\u65ad\u662f\u5426\u6709\u9ad8\u4f18\u5148\u7ea7\u4efb\u52a1\u6253\u65ad\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u4efb\u52a1\nfunction checkForInterruption(\n  fiberThatReceivedUpdate: Fiber,\n  updateExpirationTime: ExpirationTime,\n) {\n  if (\n    enableUserTimingAPI &&\n    workInProgressRoot !== null &&\n    updateExpirationTime > renderExpirationTime\n  ) {\n    // \u5982\u679c\u5f53\u524d fiber \u7684\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0c\u9700\u8981\u6253\u65ad\u5f53\u524d\u6267\u884c\u7684\u4efb\u52a1\uff0c\n    // \u7acb\u5373\u6267\u884c\u8be5 fiber \u4e0a\u7684 update\uff0c\u66f4\u65b0 interruptedBy \u5168\u5c40\u5c5e\u6027\n    interruptedBy = fiberThatReceivedUpdate;\n  }\n}\n\n")),(0,i.kt)("h2",{id:"schedulependinginteractions"},(0,i.kt)("inlineCode",{parentName:"h2"},"schedulePendingInteractions")),(0,i.kt)("p",null,"\u9519\u8bef\u8ddf\u8e2a\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"__interactionsRef.current"),"\u662f\u4e00\u4e2a ",(0,i.kt)("inlineCode",{parentName:"p"},"Set")," \u6570\u636e\u7ed3\u6784\uff0c\u80fd\u7528\u6765\u8bc6\u522b\u66f4\u65b0\u662f\u7531\u4ec0\u4e48\u5f15\u8d77\u7684\uff0c\u5c3d\u7ba1\u8fd9\u4e2a\u8ffd\u8e2a\u66f4\u65b0\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"API")," \u4f9d\u7136\u662f\u5b9e\u9a8c\u6027\u8d28\u7684\u3002\u5229\u7528 ",(0,i.kt)("inlineCode",{parentName:"p"},"FiberRoot")," \u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"pendingInteractionMap")," \u5c5e\u6027\u548c\u4e0d\u540c\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"expirationTime"),"\uff0c\u83b7\u53d6\u6bcf\u6b21 ",(0,i.kt)("inlineCode",{parentName:"p"},"schedule")," \u6240\u9700\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," \u4efb\u52a1\u7684\u96c6\u5408\uff0c\u8bb0\u5f55\u5b83\u4eec\u7684\u6570\u91cf\uff0c\u5e76\u68c0\u6d4b\u8fd9\u4e9b\u4efb\u52a1\u662f\u5426\u4f1a\u51fa\u9519\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function pushInteractions(root) {\n  if (enableSchedulerTracing) {\n    const prevInteractions: Set<Interaction> | null = __interactionsRef.current;\n    __interactionsRef.current = root.memoizedInteractions;\n    return prevInteractions;\n  }\n  return null;\n}\n\nfunction popInteractions(prevInteractions) {\n  if (enableSchedulerTracing) {\n    __interactionsRef.current = prevInteractions;\n  }\n}\n\n// \u53ea\u662f scheduleInteractions \u7684\u52a0\u58f3\u51fd\u6570\nfunction schedulePendingInteractions(root, expirationTime) {\n  // This is called when work is scheduled on a root.\n  // It associates the current interactions with the newly-scheduled expiration.\n  // They will be restored when that expiration is later committed.\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  // \u5f53\u5de5\u4f5c\u5b89\u6392\u5728root\u65f6\u8c03\u7528\u3002\n  // \u5c06\u5f53\u524d\u4ea4\u4e92\u4e0e\u65b0\u8ba1\u5212\u7684\u8fc7\u671f\u65f6\u95f4\u76f8\u5173\u8054\u3002\n  // \u5b83\u4eec\u5c06\u5728\u4ee5\u540e\u5230\u671f\u65f6\u6062\u590d\u3002\n  scheduleInteractions(root, expirationTime, __interactionsRef.current);\n}\n\n// \u4e3b\u8981\u6d89\u53ca\u5230 scheduler-tracing \u4ea4\u4e92\u7684\u5904\u7406\nfunction scheduleInteractions(root, expirationTime, interactions) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  if (interactions.size > 0) {\n    const pendingInteractionMap = root.pendingInteractionMap;\n    const pendingInteractions = pendingInteractionMap.get(expirationTime);\n    if (pendingInteractions != null) {\n      interactions.forEach(interaction => {\n        if (!pendingInteractions.has(interaction)) {\n          // Update the pending async work count for previously unscheduled interaction.\n          // \u66f4\u65b0\u4ee5\u524d\u672a\u8ba1\u5212\u7684\u4ea4\u4e92\u7684\u5f85\u5904\u7406\u5f02\u6b65\u5de5\u4f5c\u8ba1\u6570\n          interaction.__count++;\n        }\n\n        pendingInteractions.add(interaction);\n      });\n    } else {\n      pendingInteractionMap.set(expirationTime, new Set(interactions));\n\n      // Update the pending async work count for the current interactions.\n      // \u66f4\u65b0\u5f53\u524d\u4ea4\u4e92\u7684\u5f85\u5904\u7406\u5f02\u6b65\u5de5\u4f5c\u8ba1\u6570\n      interactions.forEach(interaction => {\n        interaction.__count++;\n      });\n    }\n\n    const subscriber = __subscriberRef.current;\n    if (subscriber !== null) {\n      const threadID = computeThreadID(root, expirationTime);\n      subscriber.onWorkScheduled(interactions, threadID);\n    }\n  }\n}\n\n//\u904d\u5386\u68c0\u6d4b\uff0c\u629b\u51fa\u9519\u8bef\nfunction onWorkScheduled(\n  interactions: Set<Interaction>,\n  threadID: number,\n): void {\n  let didCatchError = false;\n  let caughtError = null;\n\n  subscribers.forEach(subscriber => {\n    try {\n      subscriber.onWorkScheduled(interactions, threadID);\n    } catch (error) {\n      if (!didCatchError) {\n        didCatchError = true;\n        caughtError = error;\n      }\n    }\n  });\n\n  if (didCatchError) {\n    throw caughtError;\n  }\n}\n\n")))}u.isMDXComponent=!0}}]);